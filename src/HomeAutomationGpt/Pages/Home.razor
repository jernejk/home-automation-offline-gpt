@* Example prompt: Say "It's really cold" and set A/C to 23, TV on and light in living room on as well *@
@page "/"
@using System.Text.Json
@using System.Text
@using System.Runtime.Serialization
@using HomeAutomationGpt.Models
@using HomeAutomationGpt.Services

<PageTitle>Home Automation</PageTitle>

<div class="container">
    <div class="sidebar">
        <h3>Devices</h3>
        <ul>
            @foreach (var device in Devices)
            {
                <li>
                    <span>@device.Name</span>
                    <span>@(device.IsOn ? "🟢" : "🔴")</span>
                    @if (device.Value.HasValue)
                    {
                        <span>@device.Value.Value</span>
                    }
                </li>
            }
        </ul>
        <input @bind="NewDeviceName" placeholder="Enter device name" class="input-text" />
        <button @onclick="AddDevice" class="btn">Add Device</button>
    </div>
    <div class="main-content">
        <textarea @bind="Command" placeholder="Enter command" class="textarea"></textarea>
        <button @onclick="SendCommand" class="btn">Send</button>
        <div>
            @if (!string.IsNullOrEmpty(SpeakText))
            {
                <h4>Speak:</h4>
                <p>@SpeakText</p>
            }
        </div>
        <div class="debug-section">
            <input type="checkbox" @bind="ShowDebug" /> Show debug
            @if (ShowDebug || IsRequestFailed)
            {
                <div class="debug-box">
                    <h4>Debug:</h4>
                    <p>@Debug</p>

                    <h4>Response:</h4>
                    <pre>
                        @Response
                    </pre>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IHomeAssistanceService _has = new HomeAssistanceServiceV3();

    private List<Device> Devices { get; set; } = new List<Device>
    {
        new Device { Name = "TV" },
        new Device { Name = "Kitchen lights" },
        new Device { Name = "A/C" },
        new Device { Name = "Living room lights" }
    };

    private string? NewDeviceName { get; set; }
    private string? Command { get; set; }
    private string? Debug { get; set; }
    private string? Response { get; set; }
    private string? SpeakText { get; set; }
    private bool ShowDebug { get; set; } = false;
    private bool IsRequestFailed { get; set; } = false;

    private void AddDevice()
    {
        if (!string.IsNullOrWhiteSpace(NewDeviceName))
        {
            Devices.Add(new Device { Name = NewDeviceName });
            NewDeviceName = string.Empty;
        }
    }

    private async Task SendCommand()
    {
        Debug = string.Empty; // Clear the debug information before sending a new command
        Response = string.Empty; // Clear the response before sending a new command
        SpeakText = string.Empty; // Clear the speak text before sending a new command

        if (string.IsNullOrWhiteSpace(Command))
        {
            Debug = "Command is empty";
            return;
        }

        DeviceCommandResponse result = await _has.ExecuteCommandAsync(Command, Devices);
        Response = result.ChatResponse;

        if (!string.IsNullOrWhiteSpace(result.Errors) || result.DeviceActions == null)
        {
            Debug = result.Errors;

            IsRequestFailed = true;
            ShowDebug = true;
            return;
        }

        UpdateDeviceStates(result.DeviceActions);
    }

    private void UpdateDeviceStates(List<DeviceAction> deviceActions)
    {
        try
        {
            foreach (DeviceAction action in deviceActions)
            {
                if (!string.IsNullOrEmpty(action?.Device))
                {
                    var device = FindDevice(action.Device);
                    if (device != null)
                    {
                        switch (action?.Action?.ToLower())
                        {
                            case "turn on":
                            case "turnon":
                            case "on":
                                device.IsOn = true;
                                break;

                            case "turn off":
                            case "turnoff":
                            case "off":
                                device.IsOn = false;
                                device.Value = null; // Clear value when device is turned off
                                break;

                            // Sometimes changing temperature responds with "SetTemperature".
                            // Gemma sometimes uses "Set" instead of "SetValue".
                            case "set":
                            case "setvalue":
                            case "settemperature":
                                device.Value = action.Value;
                                device.IsOn = true; // Turn on the device
                                break;
                        }
                    }
                }
                else if (action?.Action?.ToLower() == "speak" && !string.IsNullOrWhiteSpace(action.Text))
                {
                    SpeakText = action.Text;
                }
            }

            // Update the UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug = $"Failed to process response: {ex.Message}";
            IsRequestFailed = true;
            ShowDebug = true; // Show debug information if an exception occurs
        }
    }

    public Device? FindDevice(string deviceName)
    {
        if (string.IsNullOrWhiteSpace(deviceName))
        {
            return null;
        }

        Device? foundDevice = Devices.FirstOrDefault(d => d.Name.Equals(deviceName, StringComparison.OrdinalIgnoreCase));
        if (foundDevice != null)
        {
            return foundDevice;
        }

        // Sometimes, for deviceName "A/C" it responds with "AC".
        deviceName = deviceName.Replace("/", string.Empty);
        return Devices.FirstOrDefault(d => d.Name.Replace("/", string.Empty).Equals(deviceName, StringComparison.OrdinalIgnoreCase));
    }
}
